// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel FunctionKernel

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

struct Particle
{
    float3 position;
    float4 color;
    float lifetime;
};
RWStructuredBuffer<Particle> Particles;
float dt;
int shouldMove;
float2 mousePosition;


[numthreads(8,8,1)]
void FunctionKernel (uint3 id : SV_DispatchThreadID)
{
    float r = id.x / 256.0f;
    float g = id.y / 256.0f;
    Result[id.xy] = float4(r,g,0,1);
    //https://zhuanlan.zhihu.com/p/33675797
    if (shouldMove > 0) {
		float2 v = float2(mousePosition.x - Particles[id.x].position.x, mousePosition.y - Particles[id.x].position.y);
		float d2 = v.x * v.x + v.y * v.y;
		Particles[id.x].velocity = Particles[id.x].velocity + 5 * (v / d2) * dt;
	}
	Particles[id.x].position = Particles[id.x].position + Particles[id.x].velocity * dt;

    //Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
}
